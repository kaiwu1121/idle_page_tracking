Idle Page Tracking
==================

This is a toolbox for idle page tracking.  It can be used to know real working
set size of a process, rather than vsz or rss.


Tools
=====

This section gives brief description and usage of core tools in the box.


userprog
--------

`userprog` is a sample synthetic workload for test of other tools.  It
interactively allocates and access specified pages in the allocated pages.
After execution, it first asks how many pages to allocates.  Once you type in
how many pages to allocate, the program will repeatedly asks how many pages in
the allocated pages you want to do access.


pfnofmap.py
-----------

`pfnofmap.py` receives pid and virtual address mapping path name as argument
and giving page frame number for the mapped virtual address range.  Internally,
it uses /proc/pid/maps and /proc/pid/pagemap.  Because of security, you should
have root access.  For example, you may use the tool in below way:
```
$ sudo ./pfnofmap.py `pidof userprog` [stack]
98758566
96560353
```


pageidle
--------

`pageidle` is a program to set / get idleness of physical pages.  When running
it, you should give at least 2 arguments.  First argument should be string,
`set` or `get`.  After that, page frame number(s) of physical page(s) that you
want to set or get their idleness should follow.  For example:
```
$ PID=`pidof userprog`; HEAP=`./heapof.py $PID`; \
	PFNS=`sudo ./pfnof.py $PID $HEAP`; sudo ./pageidle set $PFNS
$ PID=`pidof userprog`; HEAP=`./heapof.py $PID`; \
	PFNS=`sudo ./pfnof.py $PID $HEAP`; sudo ./pageidle get $PFNS
1 1 1 1 1 1 1 1 1 1 1
```

After you access few pages using `userprog`, the output of `get` becomes
different.
```
/* From userprog */
How many pages you want to access? 3
will access 3 pages
How many pages you want to access?

/* From other terminal */
$ PID=`pidof userprog`; HEAP=`./heapof.py $PID`; \
	PFNS=`sudo ./pfnof.py $PID $HEAP`; sudo ./pageidle get $PFNS
0 0 0 1 1 1 1 1 1 1 1
```


wspages.sh
----------

Now you can calculate working set size of a process using the tools.  To
simplify the life even more, `wspages.sh` helps the complicated works.  It
requires pid, time interval, and target memory mapped regions as argument.  The
third argument can be ignored.  In the case, it uses heap, stack, and anonymous
pages as target memory region by default.  If you give the arguments well, this
tool will prints out number of pages accessed between the time interval.
Simple example of usage and output is as below:
```
$ sudo ./wspages.sh `pidof userprog` 1 [heap]
3
```


wspgstat.sh
-----------

Like *stat programs (such as vmstat, iostat, ...), wspgstat.sh monitors and
print out number of pages in working set of specific process repeatedly.  It
requires pid of target program, delay between idleness check, and target memory
mapped regions as arguments.  The third argument is optional and has default
value as same as wspages.sh's same argument.  Simple example usage is as below:
```
$ ./wspgstat.sh `pidof mysqld` 5
1 17448
9 21536
18 21659
```


License
=======

GPL v3


Author
======

SeongJae Park <sj38.park@gmail.com>
